/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {User}
 */
// @ts-ignore
export function createUserFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUser;
}
/**
 * The deserialization information for the current model
 * @param User The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUser(user: Partial<User> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "displayName": n => { user.displayName = n.getStringValue(); },
        "id": n => { user.id = n.getStringValue(); },
    }
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param User The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUser(writer: SerializationWriter, user: Partial<User> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!user || isSerializingDerivedType) { return; }
    writer.writeStringValue("displayName", user.displayName);
    writer.writeStringValue("id", user.id);
    writer.writeAdditionalData(user.additionalData);
}
export interface User extends AdditionalDataHolder, Parsable {
    /**
     * The displayName property
     */
    displayName?: string | null;
    /**
     * The id property
     */
    id?: string | null;
}
/* tslint:enable */
/* eslint-enable */
